# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitationsp   
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.3.0
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-extending_airflow:latest} # setting new image for add library
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}

    # smtp setup
    AIRFLOW__SMTP__SMTP_HOST: smtp.gmail.com
    AIRFLOW__SMTP__SMTP_PORT: 587 # 465
    AIRFLOW__SMTP__SMTP_USER: benzativit@gmail.com
    AIRFLOW__SMTP__SMTP_PASSWORD: ubuojcyhfcstdlzv
    AIRFLOW__SMTP__SMTP_MAIL_FROM: benzativit@gmail.com # mail_user_name_of_your_app@mail.server.name


  volumes:
    -  ${PWD}/./airflow/dags:/opt/airflow/dags
    -  ${PWD}/./airflow/logs:/opt/airflow/logs
    -  ${PWD}/./airflow/plugins:/opt/airflow/plugins
    -  ${PWD}/./airflow/scripts:/opt/airflow/scripts
    # - /var/run/docker.sock:/var/run/docker.sock <<=== setup docker.sock for release version 
    -  /var/run/docker.sock.raw:/var/run/docker.sock


  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  ### HADOOP ### 
  namenode:
      image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
      container_name: hive-namenode
      volumes:
          - namenode:/hadoop/dfs/name
      environment:
          - CLUSTER_NAME=test
      env_file:
          -  ${PWD}/./hadoop-hive.env
      ports:
          - "50070:50070"

  datanode:
      image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
      volumes:
          - datanode:/hadoop/dfs/data
      env_file:
          -  ${PWD}/./hadoop-hive.env
      environment:
          SERVICE_PRECONDITION: "namenode:50070"
      ports:
          - "50075:50075"

  hive-metastore-postgresql:
      image: bde2020/hive-metastore-postgresql:2.3.0
  hive-metastore:
      image: bde2020/hive:2.3.2-postgresql-metastore
      env_file:
          -  ${PWD}/./hadoop-hive.env
      command: /opt/hive/bin/hive --service metastore
      environment:
          SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
      ports:
          - "9083:9083"

  hive-server:
      image: bde2020/hive:2.3.2-postgresql-metastore
      container_name: hive-server
      env_file:
          -  ${PWD}/./hadoop-hive.env
      environment:
          HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
          SERVICE_PRECONDITION: "hive-metastore:9083"
      ports:
          - "10000:10000"
          - "10002:10002"
      volumes:
          -  ${PWD}/./airflow/others/sqoop:/opt/sqoop
          -  ${PWD}/./airflow/scripts/hql:/opt/hql
  spark-master:
      image: bde2020/spark-master:3.1.1-hadoop3.2
      container_name: spark-master
      ports:
          - "8079:8080"
          - "7077:7077"
      environment:
          - INIT_DAEMON_STEP=setup_spark
      volumes:
          -  ${PWD}/./airflow/scripts/spark:/home/script
          -  ${PWD}/./sql_result:/home/sql_result

  spark-worker-1:
      image: bde2020/spark-worker:3.1.1-hadoop3.2
      container_name: spark-worker-1
      depends_on:
          - spark-master
      ports:
          - "8081:8081"
      environment:
          - "SPARK_MASTER=spark://spark-master:7077"
  spark-worker-2:
      image: bde2020/spark-worker:3.1.1-hadoop3.2
      container_name: spark-worker-2
      depends_on:
          - spark-master
      ports:
          - "8082:8081" 
      environment:
          - "SPARK_MASTER=spark://spark-master:7077"
          
  adminer:
      image: adminer:latest
      ports:
          - 5000:8080/tcp
      deploy:
        restart_policy:
          condition: on-failure         
            

  ## MYSQL DATABASE ###

  mysql-db:
    image: mysql:5.7
    hostname: mysql-db
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_DATABASE: 'airflow'
      MYSQL_USER: 'airflow'
      MYSQL_PASSWORD: 'airflow'
      MYSQL_ROOT_PASSWORD: 'airflow'
    ports:
      - '3306:3306'
    volumes:
      - ${PWD}/data:/var/lib/mysql/data/test

  ### POSTGRES DATABASE BACKEND ###
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ${PWD}/data:/var/lib/postgresql/data/lmwn
    ports:
      - 5432:5432
    healthcheck: 
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  ### AIRFLOW SETUP ###
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - .:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

volumes:
  my-db-volume:
  namenode:
  datanode:
